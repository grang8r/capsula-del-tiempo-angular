# üìÑ Documento de Requisitos Maestros (MRD)

C√°psula del Tiempo en Angular 
Prototipo de DApp  
**Frontend:** Angular  
**Estado:** Prototipo funcional (local, sin backend ni blockchain a√∫n)

---

## üéØ Objetivo del Proyecto

Dise√±ar una DApp que permita a los usuarios enviar un mensaje secreto a una "c√°psula del tiempo", que se desbloquea tras una cuenta regresiva. Esta c√°psula simula una interacci√≥n con una blockchain, usando Angular como prototipo para el frontend.

---

## üß© Componentes Principales

| Componente              | Descripci√≥n                                                                |
|-------------------------|----------------------------------------------------------------------------|
| **TimeCapsuleComponent** | Componente Angular que gestiona el flujo del mensaje (encriptado/desencriptado). |
| **Interfaz de Usuario**  | Plantillas HTML con directivas Angular para entrada de datos, estado y resultado. |
| **Simulaci√≥n Blockchain**| En esta versi√≥n se simula con temporizadores y l√≥gica local.               |

---

## üîê Requisitos Funcionales

| ID     | Requisito                                                                                 |
|--------|--------------------------------------------------------------------------------------------|
| RF-01  | El usuario debe poder escribir un mensaje secreto en una caja de texto.                   |
| RF-02  | Al enviar el mensaje, debe mostrarse un mensaje encriptado.                               |
| RF-03  | Debe iniciarse una cuenta regresiva de 10 segundos.                                       |
| RF-04  | Al terminar la cuenta, debe mostrarse el mensaje desencriptado autom√°ticamente.           |
| RF-05  | Mientras dure la cuenta atr√°s, debe visualizarse una capa animada (overlay).              |
| RF-06  | Debe evitarse que el usuario vea el mensaje desencriptado antes de que la cuenta termine. |

---

## üîí Requisitos No Funcionales

| ID     | Requisito                                                                                   |
|--------|----------------------------------------------------------------------------------------------|
| RNF-01 | El sistema debe ser r√°pido en la respuesta de UI (< 100ms por acci√≥n local).                |
| RNF-02 | El prototipo debe estar construido √≠ntegramente en Angular sin depender a√∫n de un backend.  |
| RNF-03 | El c√≥digo debe ser mantenible y modular.                                                     |
| RNF-04 | La l√≥gica de encriptaci√≥n/desencriptaci√≥n debe ser simple y simulada.                        |

---

## üß™ Criterios de Aceptaci√≥n

- ‚úÖ El mensaje introducido por el usuario se refleja correctamente en el modelo (`userMessage`).
- ‚úÖ Al presionar ‚ÄúEnviar‚Äù, se encripta y se inicia la cuenta atr√°s.
- ‚úÖ A los 10 segundos exactos, se muestra el mensaje desencriptado.
- ‚úÖ Antes de esos 10 segundos, **no hay forma de acceder al mensaje**.

---

## üö´ Limitaciones del Prototipo

- No hay almacenamiento persistente (ni localStorage ni base de datos).
- No hay conexi√≥n real con una blockchain.
- La encriptaci√≥n es simulada (no criptogr√°ficamente segura).
- No hay gesti√≥n de usuarios ni autenticaci√≥n.

---

## üöÄ Futuras Extensiones

| Funcionalidad               | Descripci√≥n                                                                 |
|----------------------------|-----------------------------------------------------------------------------|
| Almacenamiento Blockchain  | Integraci√≥n con smart contracts para guardar el mensaje en una red p√∫blica. |
| Wallet (Metamask)          | Login del usuario mediante su cartera de Ethereum.                         |
| Backend Node + DB          | Si se quiere usar base de datos intermedia para pruebas o almacenamiento.   |
| NFT de c√°psula             | Cada mensaje encapsulado podr√≠a generar un NFT √∫nico.                      |
